/******************************/
/* highways.validator.mapcss */
/******************************/

/* mtw roundaboutwithname */

way[inside("IT")][junction=roundabout][name][name !~ /^(?i)(rotatoria|rotonda)[ ]/] {
	throwWarning: tr("{0} together with {1}", "{1.tag}", "{2.key}");
	group: "MapThisWay (Highways)";
}

/* mtw invaliddug - suggested by canfe */

way[inside("IT")][highway][name][highway !~ /cycleway|path|via_ferrata/][name !~ /^(?i)(arco|autostrada|belvedere|calata|calle|cavalcavia|circonvallazione|corso|corte|cortile|discesa|galleria|gradinata|larghetto|largo|litoranea|lungargine|lungo[a-z]+|molo|parcheggio|passaggio|passeggiata|percorso ciclabile|percorso ciclopedonale|percorso pedonale|piazza|piazzale|piazzetta|pista ciclabile|ponte|raccordo|rampa|ronco|rotatoria|rotonda|salita|scalinata|scesa|sentiero|slargo|sottopasso|sovrappasso|spiazzo|strada|strada antica|strada comunale|strada consortile|strada nuova|strada panoramica|strada poderale|strada privata|strada provinciale|strada regionale|strada statale|strada vecchia|strada vicinale|stradella|stradello|stradone|tangenziale|traversa|traversa privata|via|via antica|via comunale|via nazionale|via nuova|via panoramica|via privata|via provinciale|via vecchia|viale|vialetto|vico|vico chiuso|vico cieco|vico privato|vicoletto|vicolo|vicolo chiuso|vicolo cieco|vicolo privato|viottolo)[ ]/] {
	throwWarning: tr("unusual value of {0}", "{2.key}: non trovato in elenco Registro delle Denominazioni Urbanistiche Generiche (DUG)");
	group: "MapThisWay (Highways)";
}

/* mtw nolivingstreet */

way[inside("IT")][highway=living_street] {
  throwWarning: tr("Unspecific tag {0}", "{1.tag}");
	group: "MapThisWay (Highways)";
}

/* mtw unusualmaxspeed */

way[inside("IT")][highway][maxspeed][maxspeed !~ /^(5|10|15|20|30|40|50|60|70|80|90|100|110|120|130)$/] {
	throwWarning: tr("unusual value of {0}", "{2.tag}");
	group: "MapThisWay (Highways)";
	set unusual_maxspeed;
}

/* mtw maxspeedhigh */

way[inside("IT")][highway=primary][maxspeed][maxspeed > 110]!.unusual_maxspeed,
way[inside("IT")][highway=secondary][maxspeed][maxspeed > 90]!.unusual_maxspeed,
way[inside("IT")][highway=tertiary][maxspeed][maxspeed > 90]!.unusual_maxspeed,
way[inside("IT")][highway=residential][maxspeed][maxspeed > 50]!.unusual_maxspeed {
	throwWarning: tr("{0} together with {1}", "{1.tag}", "{2.tag}");
	group: "MapThisWay (Highways)";
}

/* mtw refwithspace - suggested by Andrea Musuruane */

way[inside("IT")][highway][ref][ref =~ /(\s+)|[;]/] {
	throwWarning: tr("unusual value of {0}", "{2.key}: https://wiki.openstreetmap.org/wiki/IT:Italian_Roads_Tagging#ref");
	group: "MapThisWay (Highways)";
}

/* mtw crossingzebranouk */

*[inside("IT")][highway][crossing=zebra] {
  throwError: tr("wrong value: {0}", "{2.tag}");
	suggestAlternative: "crossing=uncontrolled + crossing:markings=zebra";
	group: "MapThisWay (Highways)";
	fixRemove: "crossing";
	fixAdd: "crossing=uncontrolled";
	fixAdd: "crossing:markings=zebra";
}

/* mtw crossingmarked */

*[inside("IT")][highway][crossing=marked] {
  throwWarning: tr("{0} together with {1}", "{1.key}", "{2.tag}");
	suggestAlternative: "crossing=uncontrolled + crossing:markings=*";
	group: "MapThisWay (Highways)";
	fixRemove: "crossing";
	fixAdd: "crossing=uncontrolled";
	fixAdd: "crossing:markings=yes";
}

/* mtw crossingrefzebra */

*[inside("IT")][highway][crossing_ref=zebra] {
  throwWarning: tr("Unspecific tag {0}", "{2.tag}");
	suggestAlternative: "crossing:markings=zebra";
	group: "MapThisWay (Highways)";
	fixRemove: "crossing_ref";
	fixAdd: "crossing:markings=zebra";
}

/* mtw crossingref */

*[inside("IT")][highway][crossing_ref][crossing_ref!=zebra] {
  throwWarning: tr("Unspecific tag {0}", "{2.tag}");
	suggestAlternative: "crossing:markings=*";
	group: "MapThisWay (Highways)";
}

way[inside("IT")][highway=cycleway][foot=designated],
way[inside("IT")][highway=path][foot=designated][bicycle=designated] {
	set pista_ciclopedonale;
}

/* mtw segregatedwronghighway */

way[inside("IT")][highway][segregated]!.pista_ciclopedonale {
	throwWarning: tr("{0} together with {1}", "{1.key}", "{2.tag}");
	group: "MapThisWay (Highways)";
}

/* mtw pathwithfootyes */

way[inside("IT")][highway][foot=no][motorroad=yes],
way[inside("IT")][highway][foot=yes][motorroad!=yes][highway!=cycleway],
way[inside("IT")][highway=cycleway][foot=no],
way[inside("IT")][highway=cycleway][bicycle=designated],
way[inside("IT")][highway][bicycle=no][motorroad=yes],
way[inside("IT")][highway][bicycle=yes][motorroad!=yes][highway!=footway],
way[inside("IT")][highway=footway][bicycle=no],
way[inside("IT")][highway=footway][foot=designated] {
  throwWarning: tr("{0} is unnecessary", "{2.tag}");
	group: "MapThisWay (Highways)";
	fixRemove: "{2.key}";
}

/* mtw onelanenooneway - Suggested by Volker */

way[highway][lanes<2][!oneway][junction!=roundabout] {
  throwWarning: tr("{0} together with {1} but without {2}", "{0.key}", "{1.key}<2", "{2.key}");
	group: "MapThisWay (Highways)";
}

/* mtw onelanenopassingplaces - Suggested by Andrea Musuruane */

way[highway][lanes<2][oneway=no][!passing_places] {
	throwWarning: tr("{0} together with {1} but without {2}", "{0.key}", "{1.key}<2", "{3.key}");
	group: "MapThisWay (Highways)";
}

/* mtw onelanelanemarkings */

way[highway][lanes<2][lane_markings=yes] {
  throwWarning: tr("{0} together with {1} and {2}", "{0.tag}", "{1.key}<2", "{2.tag}");
	group: "MapThisWay (Highways)";
}

/* mtw passingplacesmanylanes */

way[highway][lanes>=2][passing_places] {
  throwWarning: tr("{0} together with {1} and {2}", "{0.tag}", "{1.key}>=2", "{2.key}");
	group: "MapThisWay (Highways)";
}

/* mtw citylimitwithoutdirection */

way[highway][oneway!=yes] > node[traffic_sign=city_limit][!direction] {
  throwWarning: tr("{0} without {1}", "{1.key}");
	group: "MapThisWay (Highways)";
}

/* mtw citylimitwithoutcitylimit */

way[highway][oneway=yes] > node[traffic_sign=city_limit][!city_limit] {
  throwWarning: tr("{0} without {1}", "{0.tag}", "{1.key}");
	group: "MapThisWay (Highways)";
}

/* mtw trafficsingunconnected - suggested by Andrea Musuruane */

node:unconnected[traffic_sign=city_limit] {
	throwWarning: tr("isolated node which must be connected to a way");
	group: "MapThisWay (Highways)";
}

