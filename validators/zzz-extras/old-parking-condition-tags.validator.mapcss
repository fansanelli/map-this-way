/*
 * See: https://wiki.openstreetmap.org/wiki/Key:parking:condition
 */

/* mtw oldparkingschema */
way[tag_regex("^parking:lane:(both|left|right)")] {
	throwWarning: tr("{0} is deprecated", "parking:lane:side");
	group: "MapThisWay";
}

/* mtw oldparkingconditionschema */
way[tag_regex("^parking:condition:(both|left|right)")] {
	throwWarning: tr("{0} is deprecated", "parking:condition:side");
	group: "MapThisWay";
}

/* mtw oldparkingleftno */
way["parking:lane:left"=no] {
	throwWarning: tr("{0} is deprecated", "{0.tag}");
	suggestAlternative: "parking:left";
	group: "MapThisWay";
	fixChangeKey: "parking:lane:left => parking:left";
}

/* mtw oldparkingrightno */
way["parking:lane:right"=no] {
	throwWarning: tr("{0} is deprecated", "{0.tag}");
	suggestAlternative: "parking:right";
	group: "MapThisWay";
	fixChangeKey: "parking:lane:right => parking:right";
}

/* mtw oldparkingbothno */
way["parking:lane:both"=no] {
	throwWarning: tr("{0} is deprecated", "{0.tag}");
	suggestAlternative: "parking:both";
	group: "MapThisWay";
	fixChangeKey: "parking:lane:both => parking:both";
}

/* mtw oldparkingrightparallel */
way["parking:lane:right:parallel"]["parking:lane:right:parallel" =~ /(half_on_kerb|on_kerb|street_side|shoulder)/] {
	throwWarning: tr("{0} is deprecated", "{0.tag}");
	suggestAlternative: "parking:right";
	group: "MapThisWay";
	fixChangeKey: "parking:lane:right:parallel => parking:right";
	fixAdd: "parking:right:orientation=parallel";
	fixRemove: "parking:lane:right";
	fixRemove: "parking:lane:both";
}

/* mtw oldparkingrightparallelonstreet */
way["parking:lane:right:parallel"]["parking:lane:right:parallel" =on_street] {
	throwWarning: tr("{0} is deprecated", "{0.tag}");
	suggestAlternative: "parking:right";
	group: "MapThisWay";
	fixAdd: "parking:right=lane";
	fixAdd: "parking:right:orientation=parallel";
	fixRemove: "parking:lane:right:parallel";
	fixRemove: "parking:lane:right";
	fixRemove: "parking:lane:both";
}

/* mtw oldparkingrightparallelunknown */
way["parking:lane:right"=parallel][!"parking:lane:right:parallel"] {
	throwWarning: tr("{0} is deprecated", "{0.tag}");
	suggestAlternative: "parking:right";
	group: "MapThisWay";
	fixAdd: "parking:right=yes";
	fixAdd: "parking:right:orientation=parallel";
	fixRemove: "parking:lane:right";
	fixRemove: "parking:lane:both";
}

/* mtw oldparkingleftparallel */
way["parking:lane:left:parallel"]["parking:lane:left:parallel" =~ /(half_on_kerb|on_kerb|street_side|shoulder)/] {
	throwWarning: tr("{0} is deprecated", "{0.tag}");
	suggestAlternative: "parking:left";
	group: "MapThisWay";
	fixChangeKey: "parking:lane:left:parallel => parking:left";
	fixAdd: "parking:left:orientation=parallel";
	fixRemove: "parking:lane:left";
	fixRemove: "parking:lane:both";
}

/* mtw oldparkingleftparallelonstreet */
way["parking:lane:left:parallel"]["parking:lane:left:parallel" =on_street] {
	throwWarning: tr("{0} is deprecated", "{0.tag}");
	suggestAlternative: "parking:left";
	group: "MapThisWay";
	fixAdd: "parking:left=lane";
	fixAdd: "parking:left:orientation=parallel";
	fixRemove: "parking:lane:left:parallel";
	fixRemove: "parking:lane:left";
	fixRemove: "parking:lane:both";
}

/* mtw oldparkingleftparallelunknown */
way["parking:lane:left"=parallel][!"parking:lane:left:parallel"] {
	throwWarning: tr("{0} is deprecated", "{0.tag}");
	suggestAlternative: "parking:left";
	group: "MapThisWay";
	fixAdd: "parking:left=yes";
	fixAdd: "parking:left:orientation=parallel";
	fixRemove: "parking:lane:left";
	fixRemove: "parking:lane:both";
}

/* mtw oldparkingrightperpendicular */
way["parking:lane:right:perpendicular"]["parking:lane:right:perpendicular" =~ /(half_on_kerb|on_kerb|street_side|shoulder)/] {
	throwWarning: tr("{0} is deprecated", "{0.tag}");
	suggestAlternative: "parking:right";
	group: "MapThisWay";
	fixChangeKey: "parking:lane:right:perpendicular => parking:right";
	fixAdd: "parking:right:orientation=perpendicular";
	fixRemove: "parking:lane:right";
	fixRemove: "parking:lane:both";
}

/* mtw oldparkingrightperpendicularonstreet */
way["parking:lane:right:perpendicular"]["parking:lane:right:perpendicular" =on_street] {
	throwWarning: tr("{0} is deprecated", "{0.tag}");
	suggestAlternative: "parking:right";
	group: "MapThisWay";
	fixAdd: "parking:right=lane";
	fixAdd: "parking:right:orientation=perpendicular";
	fixRemove: "parking:lane:right:perpendicular";
	fixRemove: "parking:lane:right";
	fixRemove: "parking:lane:both";
}

/* mtw oldparkingrightperpendicularunknown */
way["parking:lane:right"=perpendicular][!"parking:lane:right:perpendicular"] {
	throwWarning: tr("{0} is deprecated", "{0.tag}");
	suggestAlternative: "parking:right";
	group: "MapThisWay";
	fixAdd: "parking:right=yes";
	fixAdd: "parking:right:orientation=perpendicular";
	fixRemove: "parking:lane:right";
	fixRemove: "parking:lane:both";
}

/* mtw oldparkingleftperpendicular */
way["parking:lane:left:perpendicular"]["parking:lane:left:perpendicular" =~ /(half_on_kerb|on_kerb|street_side|shoulder)/] {
	throwWarning: tr("{0} is deprecated", "{0.tag}");
	suggestAlternative: "parking:left";
	group: "MapThisWay";
	fixChangeKey: "parking:lane:left:perpendicular => parking:left";
	fixAdd: "parking:left:orientation=perpendicular";
	fixRemove: "parking:lane:left";
	fixRemove: "parking:lane:both";
}

/* mtw oldparkingleftperpendicularonstreet */
way["parking:lane:left:perpendicular"]["parking:lane:left:perpendicular" =on_street] {
	throwWarning: tr("{0} is deprecated", "{0.tag}");
	suggestAlternative: "parking:left";
	group: "MapThisWay";
	fixAdd: "parking:left=lane";
	fixAdd: "parking:left:orientation=perpendicular";
	fixRemove: "parking:lane:left:perpendicular";
	fixRemove: "parking:lane:left";
	fixRemove: "parking:lane:both";
}

/* mtw oldparkingleftperpendicularunknown */
way["parking:lane:left"=perpendicular][!"parking:lane:left:perpendicular"] {
	throwWarning: tr("{0} is deprecated", "{0.tag}");
	suggestAlternative: "parking:left";
	group: "MapThisWay";
	fixAdd: "parking:left=yes";
	fixAdd: "parking:left:orientation=perpendicular";
	fixRemove: "parking:lane:left";
	fixRemove: "parking:lane:both";
}

/* mtw oldparkingrightdiagonal */
way["parking:lane:right:diagonal"]["parking:lane:right:diagonal" =~ /(half_on_kerb|on_kerb|street_side|shoulder)/] {
	throwWarning: tr("{0} is deprecated", "{0.tag}");
	suggestAlternative: "parking:right";
	group: "MapThisWay";
	fixChangeKey: "parking:lane:right:diagonal => parking:right";
	fixAdd: "parking:right:orientation=diagonal";
	fixRemove: "parking:lane:right";
	fixRemove: "parking:lane:both";
}

/* mtw oldparkingrightdiagonalonstreet */
way["parking:lane:right:diagonal"]["parking:lane:right:diagonal" =on_street] {
	throwWarning: tr("{0} is deprecated", "{0.tag}");
	suggestAlternative: "parking:right";
	group: "MapThisWay";
	fixAdd: "parking:right=lane";
	fixAdd: "parking:right:orientation=diagonal";
	fixRemove: "parking:lane:right:diagonal";
	fixRemove: "parking:lane:right";
	fixRemove: "parking:lane:both";
}

/* mtw oldparkingrightdiagonalunknown */
way["parking:lane:right"=diagonal][!"parking:lane:right:diagonal"] {
	throwWarning: tr("{0} is deprecated", "{0.tag}");
	suggestAlternative: "parking:right";
	group: "MapThisWay";
	fixAdd: "parking:right=yes";
	fixAdd: "parking:right:orientation=diagonal";
	fixRemove: "parking:lane:right";
	fixRemove: "parking:lane:both";
}

/* mtw oldparkingleftdiagonal */
way["parking:lane:left:diagonal"]["parking:lane:left:diagonal" =~ /(half_on_kerb|on_kerb|street_side|shoulder)/] {
	throwWarning: tr("{0} is deprecated", "{0.tag}");
	suggestAlternative: "parking:left";
	group: "MapThisWay";
	fixChangeKey: "parking:lane:left:diagonal => parking:left";
	fixAdd: "parking:left:orientation=diagonal";
	fixRemove: "parking:lane:left";
	fixRemove: "parking:lane:both";
}

/* mtw oldparkingleftdiagonalonstreet */
way["parking:lane:left:diagonal"]["parking:lane:left:diagonal" =on_street] {
	throwWarning: tr("{0} is deprecated", "{0.tag}");
	suggestAlternative: "parking:left";
	group: "MapThisWay";
	fixAdd: "parking:left=lane";
	fixAdd: "parking:left:orientation=diagonal";
	fixRemove: "parking:lane:left:diagonal";
	fixRemove: "parking:lane:left";
	fixRemove: "parking:lane:both";
}

/* mtw oldparkingleftdiagonalunknown */
way["parking:lane:left"=diagonal][!"parking:lane:left:diagonal"] {
	throwWarning: tr("{0} is deprecated", "{0.tag}");
	suggestAlternative: "parking:left";
	group: "MapThisWay";
	fixAdd: "parking:left=yes";
	fixAdd: "parking:left:orientation=diagonal";
	fixRemove: "parking:lane:left";
	fixRemove: "parking:lane:both";
}

/* mtw oldparkingleftdeprecatedtwice */
way["parking:lane:left" =~ /(no_parking|no_stopping|no_standing)/] {
	throwWarning: tr("{0} is deprecated", "{0.tag}");
	suggestAlternative: "parking:left:restriction";
	group: "MapThisWay";
	fixChangeKey: "parking:lane:left => parking:left:restriction";
}

/* mtw oldparkingrightdeprecatedtwice */
way["parking:lane:right" =~ /(no_parking|no_stopping|no_standing)/] {
	throwWarning: tr("{0} is deprecated", "{0.tag}");
	suggestAlternative: "parking:right:restriction";
	group: "MapThisWay";
	fixChangeKey: "parking:lane:right => parking:right:restriction";
}

/* mtw oldparkingbothdeprecatedtwice */
way["parking:lane:both" =~ /(no_parking|no_stopping|no_standing)/] {
	throwWarning: tr("{0} is deprecated", "{0.tag}");
	suggestAlternative: "parking:both:restriction";
	group: "MapThisWay";
	fixChangeKey: "parking:lane:both => parking:both:restriction";
}

/* mtw oldparkingleftticket */
way["parking:condition:left" = ticket] {
	throwWarning: tr("{0} is deprecated", "{0.tag}");
	suggestAlternative: "parking:left:fee=yes";
	group: "MapThisWay";
	fixAdd: "parking:left:fee=yes";
	fixRemove: "parking:condition:left";
}

/* mtw oldparkingrightticket */
way["parking:condition:right" = ticket] {
	throwWarning: tr("{0} is deprecated", "{0.tag}");
	suggestAlternative: "parking:right:fee=yes";
	group: "MapThisWay";
	fixAdd: "parking:right:fee=yes";
	fixRemove: "parking:condition:right";
}

/* mtw oldparkingbothticket */
way["parking:condition:both" = ticket] {
	throwWarning: tr("{0} is deprecated", "{0.tag}");
	suggestAlternative: "parking:both:fee=yes";
	group: "MapThisWay";
	fixAdd: "parking:both:fee=yes";
	fixRemove: "parking:condition:both";
}

/* mtw oldparkingleftfree */
way["parking:condition:left" = free] {
	throwWarning: tr("{0} is deprecated", "{0.tag}");
	suggestAlternative: "parking:left:fee=no";
	group: "MapThisWay";
	fixAdd: "parking:left:fee=no";
	fixRemove: "parking:condition:left";
}

/* mtw oldparkingrightfree */
way["parking:condition:right" = free] {
	throwWarning: tr("{0} is deprecated", "{0.tag}");
	suggestAlternative: "parking:right:fee=no";
	group: "MapThisWay";
	fixAdd: "parking:right:fee=no";
	fixRemove: "parking:condition:right";
}

/* mtw oldparkingbothfree */
way["parking:condition:both" = free] {
	throwWarning: tr("{0} is deprecated", "{0.tag}");
	suggestAlternative: "parking:both:fee=no";
	group: "MapThisWay";
	fixAdd: "parking:both:fee=no";
	fixRemove: "parking:condition:both";
}

